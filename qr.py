import sys
import os
import time
import qrcode
import subprocess
import platform
from PIL import Image
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QLineEdit, QPushButton, QLabel, 
                             QProgressBar, QMessageBox, QFrame)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QPixmap, QFont, QPalette, QColor

class QRThread(QThread):
    finished = pyqtSignal(object, str, str)
    error = pyqtSignal(str)
    
    def __init__(self, url):
        super().__init__()
        self.url = url
        
    def run(self):
        try:
            img = qrcode.make(self.url)
            name = f"qr_{int(time.time())}.png"
            
            qr_folder = "QR_Codes"
            if not os.path.exists(qr_folder):
                os.mkdir(qr_folder)
            
            file_path = os.path.join(qr_folder, name)
            img.save(file_path)
            
            self.finished.emit(img, name, file_path)
        except Exception as e:
            self.error.emit(str(e))

class QRGeneratorPyQt(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_directory = os.getcwd()
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤")
        self.setFixedSize(500, 650)
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2c3e50;
            }
            QFrame {
                background-color: #34495e;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 2px solid #3498db;
                border-radius: 5px;
                padding: 10px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
            QPushButton#clear {
                background-color: #e67e22;
            }
            QPushButton#clear:hover {
                background-color: #f39c12;
            }
            QPushButton#folder {
                background-color: #2980b9;
            }
            QPushButton#folder:hover {
                background-color: #3498db;
            }
            QLabel {
                color: #ecf0f1;
            }
            QProgressBar {
                border: 2px solid #34495e;
                border-radius: 5px;
                text-align: center;
                color: white;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 3px;
            }
        """)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QFont("Arial", 20, QFont.Bold))
        layout.addWidget(title)
        
        subtitle = QLabel("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞")
        subtitle.setAlignment(Qt.AlignCenter)
        subtitle.setFont(QFont("Arial", 11))
        subtitle.setStyleSheet("color: #bdc3c7;")
        layout.addWidget(subtitle)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...")
        self.url_input.returnPressed.connect(self.generate_qr)
        layout.addWidget(self.url_input)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        self.generate_btn = QPushButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
        self.generate_btn.clicked.connect(self.generate_qr)
        self.generate_btn.setFixedHeight(40)
        buttons_layout.addWidget(self.generate_btn)
        
        self.clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.setObjectName("clear")
        self.clear_btn.clicked.connect(self.clear_field)
        self.clear_btn.setFixedHeight(40)
        buttons_layout.addWidget(self.clear_btn)
        
        layout.addLayout(buttons_layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        self.status_label.setAlignment(Qt.AlignCenter)
        self.status_label.setFont(QFont("Arial", 10, QFont.Bold))
        self.status_label.setStyleSheet("color: #3498db;")
        layout.addWidget(self.status_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # –ü—Ä–µ–≤—å—é
        preview_label = QLabel("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä QR-–∫–æ–¥–∞:")
        preview_label.setAlignment(Qt.AlignCenter)
        preview_label.setFont(QFont("Arial", 12, QFont.Bold))
        layout.addWidget(preview_label)
        
        self.preview_frame = QFrame()
        self.preview_frame.setFixedSize(200, 200)
        self.preview_frame.setStyleSheet("background-color: #34495e; border: 2px dashed #7f8c8d;")
        
        preview_layout = QVBoxLayout(self.preview_frame)
        self.qr_preview = QLabel("QR-–∫–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å")
        self.qr_preview.setAlignment(Qt.AlignCenter)
        self.qr_preview.setStyleSheet("color: #95a5a6; font-size: 12px;")
        preview_layout.addWidget(self.qr_preview)
        
        layout.addWidget(self.preview_frame, alignment=Qt.AlignCenter)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–µ QR_Codes")
        info_label.setAlignment(Qt.AlignCenter)
        info_label.setStyleSheet("color: #7f8c8d; font-size: 10px;")
        layout.addWidget(info_label)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
        self.folder_btn = QPushButton("üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å QR-–∫–æ–¥–∞–º–∏")
        self.folder_btn.setObjectName("folder")
        self.folder_btn.clicked.connect(self.open_qr_folder)
        self.folder_btn.setFixedHeight(35)
        layout.addWidget(self.folder_btn)
        
        layout.addStretch()
        
    def clear_field(self):
        self.url_input.clear()
        self.url_input.setFocus()
        
    def generate_qr(self):
        url = self.url_input.text().strip()
        
        if not url:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç!")
            self.url_input.setFocus()
            return
            
        self.generate_btn.setEnabled(False)
        self.status_label.setText("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...")
        self.status_label.setStyleSheet("color: #f39c12;")
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # indeterminate progress
        
        self.thread = QRThread(url)
        self.thread.finished.connect(self.on_generation_finished)
        self.thread.error.connect(self.on_generation_error)
        self.thread.start()
        
    def on_generation_finished(self, img, name, file_path):
        self.generate_btn.setEnabled(True)
        self.status_label.setText("QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        self.status_label.setStyleSheet("color: #2ecc71;")
        self.progress_bar.setVisible(False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é
        preview_path = "temp_preview.png"
        img.save(preview_path)
        
        pixmap = QPixmap(preview_path)
        if not pixmap.isNull():
            scaled_pixmap = pixmap.scaled(180, 180, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.qr_preview.setPixmap(scaled_pixmap)
            self.qr_preview.setText("")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            if platform.system() == 'Windows':
                os.startfile(file_path)
            elif platform.system() == 'Darwin':
                subprocess.run(['open', file_path])
            else:
                subprocess.run(['xdg-open', file_path])
        except:
            pass
            
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        self.clear_field()
        
    def on_generation_error(self, error_msg):
        self.generate_btn.setEnabled(True)
        self.status_label.setText("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!")
        self.status_label.setStyleSheet("color: #e74c3c;")
        self.progress_bar.setVisible(False)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error_msg}")
        self.url_input.setFocus()
        
    def open_qr_folder(self):
        folder_path = os.path.join(self.current_directory, "QR_Codes")
        if os.path.exists(folder_path):
            try:
                if platform.system() == 'Windows':
                    os.startfile(folder_path)
                elif platform.system() == 'Darwin':
                    subprocess.run(['open', folder_path])
                else:
                    subprocess.run(['xdg-open', folder_path])
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}")
        else:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–∞–ø–∫–∞ QR_Codes –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤—ã–π QR-–∫–æ–¥!")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = QRGeneratorPyQt()
    window.show()
    sys.exit(app.exec_())